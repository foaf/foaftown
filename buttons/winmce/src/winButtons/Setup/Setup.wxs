<?xml version="1.0" encoding="UTF-8"?>

<!-- These variables define the Windows Installer product version, product code and upgrade code. They   -->
<!-- will be used later on in this file.                                                                 -->
<?define Property_ProductVersion = "1.0.1.0" ?>
<?define Property_ProductCode = "1efff6d4-412b-4476-ac3c-b805ad899808" ?>
<?define Property_UpgradeCode = "a3f83c14-3978-4614-87f4-cfd1f7bddfa4" ?>

<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
	<Product Id="$(var.Property_ProductCode)" UpgradeCode="$(var.Property_UpgradeCode)" Name="!(loc.Property_ProductName)" Language="!(loc.Property_ProductLanguage)" Version="$(var.Property_ProductVersion)" Manufacturer="!(loc.Property_CompanyName)">

		<Package Description="!(loc.Package_Description)" Comments="!(loc.Package_Comments)" InstallerVersion="200" Compressed="yes" />

		<!-- This information enables Windows Installer major upgrade functionality so users can seamlessly  -->
		<!-- install a new version of the product and have the old version automatically uninstall behind    -->
		<!-- the scenes. See the following topic in the MSDN Library for additional information:             -->
		<!-- http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/major_upgrades.asp   -->
		<Upgrade Id="$(var.Property_UpgradeCode)">
			<UpgradeVersion Minimum="$(var.Property_ProductVersion)" OnlyDetect="yes" Property="NEWERVERSIONDETECTED" />
			<UpgradeVersion Minimum="1.0.0.0" IncludeMinimum="yes" Maximum="$(var.Property_ProductVersion)" IncludeMaximum="no" Property="OLDERVERSIONBEINGUPGRADED" />
		</Upgrade>

		<!-- This custom action prevents users from installing if a newer version of this product is already -->
		<!-- installed on the system. This is a part of Windows Installer major upgrade functionality.       -->
		<CustomAction Id="CA_BlockOlderVersionInstall" Error="!(loc.LaunchCondition_LaterVersion)" />

		<!-- This custom action prevents users from installing this product on unsupported operating system  -->
		<!-- versions. The conditions that are checked for operating system version are defined below.       -->
		<CustomAction Id="CA_ErrWrongWindowsVersion" Error="!(loc.LaunchCondition_WrongOSVersion)" />

		<!-- This condition adds an item to the LaunchCondition table of the MSI to block a user from        -->
		<!-- installing this product unless they have administrative privileges on the system.               -->
		<Condition Message="!(loc.LaunchCondition_AdminPrivs)">
			<![CDATA[Privileged]]>
		</Condition>

		<!-- This is a list of directories that are used by this product as installation locations or custom -->
		<!-- action file search locations.                                                                   -->
		<Directory Id="TARGETDIR" Name="SourceDir">
			<Directory Id="WindowsFolder" Name="WINDOWS">
				<Directory Id="EhomeFolder" Name="eHome"/>
			</Directory>
			<Directory Id="ProgramFilesFolder" Name="Program Files">
				<Directory Id="MyCompany" Name="MyCompany">
					<Directory Id="APPROOTDIRECTORY" Name="winButtons"/>
				</Directory>
			</Directory>
		</Directory>

		<!-- This is a list of all components installed as a part of this product. A component is the        -->
		<!-- smallest atomic unit of installation in Windows Installer. Each component must have a unique    -->
		<!-- GUID. In general, it is recommended that each file be installed by a separate component in      -->
		<!-- order to avoid reference counting problems and make future servicing of this product easier.    -->
		<!-- Each component is listed as a child of the DirectoryRef that represents the directory that      -->
		<!-- the file it contains will install to.                                                           -->
		<DirectoryRef Id="APPROOTDIRECTORY">
			<Component Id="winButtons.dll" Guid="e1fd56c2-8be8-4af4-9866-d2bc7f863c3a" DiskId="1">
				<File Id="winButtons.dll" Name="winButtons.dll" KeyPath="yes" Source="..\bin\$(var.BuildType)\winButtons.dll" Checksum="yes" Vital="yes" Assembly=".net"/>
			</Component>
			<Component Id="Registration.xml" Guid="a6e2cbcc-ac2a-4381-a035-cd8342b290fc" DiskId="1">
				<File Id="Registration.xml" Name="Registration.xml" Source="..\Registration.xml" Checksum="no" />
			</Component>
		</DirectoryRef>

		<!-- This is a list of features that are installed as a part of this product. In this case, there is -->
		<!-- only one feature. Each feature contains a list of components that it will install. Features can -->
		<!-- can be displayed and allow user selection in setup UI if desired.                               -->
		<Feature Id="APPROOTFEATURE" Title="winButtons" Level="1">
			<ComponentRef Id="winButtons.dll" />
			<ComponentRef Id="Registration.xml" />
		</Feature>

		<!-- The media table defines the location that the MSI will look to find source files during         -->
		<!-- installation or repair scenarios. In this case, the source files are in a cab file that will be -->
		<!-- embedded directly into the MSI at build time.                                                   -->
		<Media Id="1" Cabinet="Application.cab" EmbedCab="yes" />

		<!-- These custom actions are used to register the application with Media Center using the utility   -->
		<!-- RegisterMceApp.exe that is installed as a part of the Windows Media Center feature. Each custom -->
		<!-- action is defined as a pair in order to leverage the WiX QtExec custom action to suppress the   -->
		<!-- pop-up UI that would ordinarily appear when running RegisterMceApp.exe. Registering a Windows   -->
		<!-- Media Center application will fail if it is already registered, so this setup will first        -->
		<!-- unregister the application and then attempt to re-register it. This setup ignores the return    -->
		<!-- code from the unregistration custom action but checks the return code of the registration       -->
		<!-- action. If registration fails, setup will fail and roll back. These custom actions use the      -->
		<!-- REGISTERMCEAPP property that is defined below in order to find the exact location of the file   -->
		<!-- RegisterMceApp.exe on the system.                                                               -->
		<CustomAction Id="CA_RegisterMceApp_Unregister_Install_Cmd" Property="CA_RegisterMceApp_Unregister_Install" Value="&quot;[REGISTERMCEAPP]&quot; /u /allusers &quot;[#Registration.xml]&quot;"/>
		<CustomAction Id="CA_RegisterMceApp_Unregister_Uninstall_Cmd" Property="CA_RegisterMceApp_Unregister_Uninstall" Value="&quot;[REGISTERMCEAPP]&quot; /u /allusers &quot;[#Registration.xml]&quot;"/>
		<CustomAction Id="CA_RegisterMceApp_Register_Cmd" Property="CA_RegisterMceApp_Register" Value="&quot;[REGISTERMCEAPP]&quot; /allusers &quot;[#Registration.xml]&quot;"/>
		<CustomAction Id="CA_RegisterMceApp_Rollback_Cmd" Property="CA_RegisterMceApp_Rollback" Value="&quot;[REGISTERMCEAPP]&quot; /u /allusers &quot;[#Registration.xml]&quot;"/>

		<CustomAction Id="CA_RegisterMceApp_Unregister_Install" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="deferred" Return="ignore" Impersonate="no"/>
		<CustomAction Id="CA_RegisterMceApp_Unregister_Uninstall" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="deferred" Return="ignore" Impersonate="no"/>
		<CustomAction Id="CA_RegisterMceApp_Register" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="deferred" Return="check" Impersonate="no"/>
		<CustomAction Id="CA_RegisterMceApp_Rollback" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="rollback" Return="ignore" Impersonate="no"/>

		<!-- The InstallExecuteSequence table describes the order that actions will be executed during       -->
		<!-- installation, repair and uninstall of this product.                                             -->
		<InstallExecuteSequence>
			<Custom Action="CA_BlockOlderVersionInstall" After="FindRelatedProducts">
				<![CDATA[NEWERVERSIONDETECTED]]>
			</Custom>
			<RemoveExistingProducts After="InstallFinalize" />
			<LaunchConditions After="AppSearch"/>

			<!-- This custom action searches for Windows version 6.0, the Windows Media Center Ident registry  -->
			<!-- value 5.0 and the presence of the file %windir%\eHome\RegisterMceApp.exe. If all of these     -->
			<!-- conditions are met, the system is a Windows Vista Home Premium or Ultimate Edition operating  -->
			<!-- system and the product will be allowed to install.                                            -->
			<Custom Action="CA_ErrWrongWindowsVersion" Before="CostInitialize"><![CDATA[(NOT VersionNT = 600 OR NOT MCEINSTALLVERSION = "5.0" OR NOT REGISTERMCEAPP) AND NOT Installed]]></Custom>

			<Custom Action="CA_RegisterMceApp_Unregister_Install_Cmd" After="CostFinalize">
				<![CDATA[NOT REMOVE]]>
			</Custom>
			<Custom Action="CA_RegisterMceApp_Unregister_Uninstall_Cmd" After="CA_RegisterMceApp_Unregister_Install_Cmd">
				<![CDATA[REMOVE AND ($Registration.xml = 2)]]>
			</Custom>
			<Custom Action="CA_RegisterMceApp_Register_Cmd" After="CA_RegisterMceApp_Unregister_Uninstall_Cmd">
				<![CDATA[NOT REMOVE]]>
			</Custom>
			<Custom Action="CA_RegisterMceApp_Rollback_Cmd" After="CA_RegisterMceApp_Register_Cmd">
				<![CDATA[NOT REMOVE]]>
			</Custom>

			<!-- This unregistration custom action must occur before files are removed during uninstall of the -->
			<!-- product because the custom action requires the registration XML file in order to run          -->
			<!-- correctly. It is conditioned to only run during uninstall using the REMOVE condition.         -->
			<Custom Action="CA_RegisterMceApp_Unregister_Uninstall" Before="RemoveFiles">
				<![CDATA[REMOVE AND ($Registration.xml = 2)]]>
			</Custom>

			<!-- This sequence of actions is important. In order to allow the roll back custom action to run   -->
			<!-- at the correct time in case the setup fails, it must be scheduled before the other actions    -->
			<!-- because Windows Installer pushes each action onto a stack and then pops them off of the stack -->
			<!-- in case of any failure in order to accomplish the roll back.                                  -->
			<Custom Action="CA_RegisterMceApp_Rollback" After="InstallFiles">
				<![CDATA[NOT REMOVE]]>
			</Custom>
			<Custom Action="CA_RegisterMceApp_Unregister_Install" After="CA_RegisterMceApp_Rollback">
				<![CDATA[NOT REMOVE]]>
			</Custom>
			<Custom Action="CA_RegisterMceApp_Register" After="CA_RegisterMceApp_Unregister_Install">
				<![CDATA[NOT REMOVE]]>
			</Custom>
		</InstallExecuteSequence>

		<!-- The InstallUISequence table describes the order that actions will be executed when the user     -->
		<!-- runs setup in full UI mode. Some actions must be scheduled in the UI and the execute sequence   -->
		<!-- tables to ensure that they will run regardless of whether the user runs setup in full UI mode   -->
		<!-- or in reduced UI or silent modes.                                                               -->
		<InstallUISequence>
			<Custom Action="CA_BlockOlderVersionInstall" After="FindRelatedProducts">
				<![CDATA[NEWERVERSIONDETECTED]]>
			</Custom>
			<Custom Action="CA_ErrWrongWindowsVersion" Before="CostInitialize"><![CDATA[(NOT VersionNT = 600 OR NOT MCEINSTALLVERSION = "5.0" OR NOT REGISTERMCEAPP) AND NOT Installed]]></Custom>
		</InstallUISequence>

		<!-- These properties define links that will appear in the Add/Remove Programs control panel when    -->
		<!-- this product is installed on the system.                                                        -->
		<Property Id="ARPHELPLINK" Value="!(loc.Property_ArpHelpLink)" />
		<Property Id="ARPURLINFOABOUT" Value="!(loc.Property_ArpUrlInfoAbout)" />

		<!-- This property defines the ALLUSERS property to be 1, which indicates that this product will be  -->
		<!-- installed per-machine instead of per-user.                                                      -->
		<Property Id="ALLUSERS">
			<![CDATA[1]]>
		</Property>

		<!-- This property uses a registry locator to determine the version of Windows Media Center present  -->
		<!-- on the system (if any). This registry-based version detection algorithm is documented in the    -->
		<!-- Windows Media Center SDK for Windows Vista.                                                     -->
		<Property Id="MCEINSTALLVERSION" Secure="yes">
			<RegistrySearch Id="MceInstallRegKey" Root="HKLM" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Media Center" Name="Ident" Type="raw"/>
		</Property>

		<!-- This property uses an AppSearch to attempt to locate the file %windir\eHome\ehShell.exe  on the -->
		<!-- system. If it is found, the property is set to the fully qualified path to this file, and this  -->
		<!-- path is used to create a desktop shortcut to launch the application in Windows Media Center.    -->
		<Property Id="EHSHELLEXE" Secure="yes">
			<DirectorySearch Id="EhomeDirectory" Path="[WindowsFolder]\ehome">
				<FileSearch Id="EhShellExe" Name="ehShell.exe" MinVersion="6.0.0.0" />
			</DirectorySearch>
		</Property>
		<!-- This property uses an AppSearch to attempt to locate the file %windir\eHome\RegisterMceApp.exe  -->
		<!-- on the system. If it is found, the property is set to the fully qualified path to this file,    -->
		<!-- and this path is used to call RegisterMceApp.exe in several custom actions listed above to      -->
		<!-- register this application with Windows Media Center.                                            -->
		<Property Id="REGISTERMCEAPP" Secure="yes">
			<DirectorySearch Id="EhomeDirectory" Path="[WindowsFolder]\ehome">
				<FileSearch Id="RegisterMceAppExe" Name="RegisterMceApp.exe" />
			</DirectorySearch>
		</Property>

		<!-- This property is used as the default installation directory, and the user can change this path  -->
		<!-- during setup. The Id must be set to WIXUI_INSTALLDIR and the value must match the directory Id  -->
		<!-- defined above that represents the root installation directory.                                  -->
		<Property Id="WIXUI_INSTALLDIR" Value="APPROOTDIRECTORY"/>

		<!-- This UIRef element specifies what WiXUI dialog set to use for the setup UI. This package uses   -->
		<!-- the WixUI_InstallDir dialog set, which provides a welcome page, a license agreement page, a     -->
		<!-- page to allow changing the installation path, an installation confirmation page, a progress     -->
		<!-- page and a completion page. Other dialog sets are available in the WiX toolset and are          -->
		<!-- described in more detail in the WiX documentation.                                              -->
		<UIRef Id="WixUI_InstallDir"/>

		<!-- In WiX v3.0, this variable is used to override the default license agreement text that is       -->
		<!-- included in the WixUIExtension with a custom file.                                              -->
		<WixVariable Id="WixUILicenseRtf" Value="License.rtf" />
	</Product>
</Wix>